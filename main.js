!function(){"use strict";function e(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function t(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var i=class{constructor(e){t(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),t(this,"_handleShadedClose",(e=>{e.target===e.currentTarget&&this.close()})),this._popupElement=document.querySelector(e),this.close=this.close.bind(this)}open(){this._popupElement.classList.add("modal_opened"),this.setEventListeners()}close(){this._popupElement.classList.remove("modal_opened"),this.removeEventListeners()}setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleShadedClose),document.addEventListener("keyup",this._handleEscClose),this._closeButton=this._popupElement.querySelector(".modal__close-button"),this._closeButton.addEventListener("click",this.close)}removeEventListeners(){this._popupElement.removeEventListener("mousedown",this._handleShadedClose),document.removeEventListener("keyup",this._handleEscClose),this._closeButton.removeEventListener("click",this.close)}};var s=class extends i{constructor(e){let{popupSelector:t,handleFormSubmit:i,loadingButtonText:s}=e;var n,r,o;super(t),n=this,o=e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)},(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="_onSubmit"))in n?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,this._popupForm=this._popupElement.querySelector(".modal__container"),this._handleFormSubmit=i,this._inputList=[...this._popupForm.querySelectorAll(".modal__container-input")],this._submitButton=this._popupElement.querySelector(".modal__container-button"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=s}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}_getInputValues(){const e={};for(const t of this._inputList)e[t.name]=t.value;return e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._onSubmit)}removeEventListeners(){super.removeEventListeners(),this._popupForm.removeEventListener("submit",this._onSubmit)}close(){this._popupForm.reset(),super.close()}};class n{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e._inputErrorClass,this._form=document.querySelector(t),this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage}_hideInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}toggleButtonState(){this._hasInvalidInput(this._inputElements)?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this.toggleButtonState(this._submitButton),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState(this._submitButton)}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}const r={inputSelector:".modal__container-input",submitButtonSelector:".modal__container-button",inactiveButtonClass:"modal__container-button_disabled",inputErrorClass:"modal__container-input_type_error"};function o(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var s=i.call(e,"string");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}const a=new class{constructor(e){o(this,"_processResponse",(e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))),o(this,"getAppInfo",(()=>Promise.all([this.getUserInfo(),this.getInitialCards()]))),this.baseUrl=e.baseUrl,this.headers=e.headers}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{method:"GET",headers:this.headers}).then(this._processResponse)}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{method:"GET",headers:this.headers}).then(this._processResponse)}editProfile(e){return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._processResponse)}addCard(e){return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._processResponse)}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(this._processResponse)}addLike(e){return fetch(`${this.baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this.headers}).then(this._processResponse)}removeLike(e){return fetch(`${this.baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this.headers}).then(this._processResponse)}updateImage(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e.avatar})}).then(this._processResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"e670e45b-056f-48c1-a43f-65723fd263c0","Content-Type":"application/json"}});let l,u;const h=new class{constructor(e){let{userNameSelector:t,userJobSelector:i,userImageSelector:s}=e;this._name=document.querySelector(t),this._job=document.querySelector(i),this._image=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._job.textContent}}getAvatar(){return{image:this._image.src}}setUserInfo(e){let{name:t,about:i}=e;this._name.textContent=t,this._job.textContent=i}setImage(e){this._image.src=e,this._image.alt=this._name.textContent}}({userNameSelector:".profile__info-name",userJobSelector:".profile__info-description",userImageSelector:".profile__image"}),c=new class extends i{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__container"),this._submitButton=this._popupElement.querySelector(".modal__container-button"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=t}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}setSubmitCallback(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}removeEventListeners(){super.removeEventListeners(),this._popupForm.removeEventListener("submit",this.setSubmitCallback)}close(){this._popupForm.reset(),super.close()}}("#deleteCardModal","Deleting..."),d=t=>{const i=new class{constructor(t,i,s,n){let{handleCardClick:r,handleDeleteClick:o,handleLikeClick:a}=i;e(this,"renderLikes",(()=>{this.isLiked()?this._cardLikeButton.classList.add("card__like-button_filled"):this._cardLikeButton.classList.remove("card__like-button_filled"),this._cardLikes.textContent=this._likes.length})),e(this,"handleDeleteButton",(()=>{this._cardElement.remove(),this._cardElement=null})),this._name=t.name,this._link=t.link,this._id=t._id,this._likes=t.likes,this._ownerId=t.owner._id,this._handleCardClick=r,this._handleDeleteClick=o,this._handleLikeClick=a,this._cardSelector=s,this._userId=n}getId(){return this._id}_setEventListeners(){this._cardLikeButton.addEventListener("click",this._handleLikeClick),this._cardDeleteButton.addEventListener("click",this._handleDeleteClick),this._imageElement.addEventListener("click",this._handleCardClick)}updateLikes(e){this._likes=e,this.renderLikes()}isLiked(){return this._likes.some((e=>e._id===this._userId))}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){this._cardElement=this._getTemplate(),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._imageElement=this._cardElement.querySelector(".card__image");const e=this._cardElement.querySelector(".card__tab-title");return this._cardDeleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardLikes=this._cardElement.querySelector(".card__like-number"),this._imageElement.src=this._link,this._imageElement.alt=this._name,e.textContent=this._name,this._setEventListeners(),this.renderLikes(),this._ownerId!==this._userId&&this._cardDeleteButton.remove(),this._cardElement}}(t,{handleCardClick:()=>{m.open(t)},handleDeleteClick:()=>{const e=i.getId();c.open(),c.setSubmitCallback((()=>{c.showLoading(),a.deleteCard(e).then((()=>{i.handleDeleteButton(),c.close()})).catch((e=>console.log(e))).finally((()=>{c.hideLoading()}))}))},handleLikeClick:()=>{const e=i.getId();i.isLiked()?a.removeLike(e).then((e=>{i.updateLikes(e.likes)})).catch((e=>console.log(e))):a.addLike(e).then((e=>{i.updateLikes(e.likes)})).catch((e=>console.log(e)))}},"#card-template",u);return i.getView()};a.getAppInfo().then((e=>{let[t,i]=e;h.setUserInfo({name:t.name,about:t.about}),h.setImage(t.avatar),u=t._id,i.reverse(),l=new class{constructor(e,t){let{items:i,renderer:s}=e;this._renderedItems=i,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._renderedItems.forEach(this._renderer)}addItem(e){this._container.prepend(e)}}({items:i,renderer:e=>{const t=d(e);l.addItem(t)}},".cards__list"),l.renderItems()})).catch((e=>console.log(e)));const m=new class extends i{constructor(e){super(e),this._previewImage=this._popupElement.querySelector(".modal-preview-image"),this._imageCaption=this._popupElement.querySelector(".modal-preview-description")}open(e){let{name:t,link:i}=e;this._previewImage.src=i,this._previewImage.alt=t,this._imageCaption.textContent=t,super.open()}}("#imageModal"),_=new s({popupSelector:"#editModal",handleFormSubmit:e=>{_.showLoading(),a.editProfile(e).then((()=>{h.setUserInfo(e),_.close()})).catch((e=>console.log(e))).finally((()=>{_.hideLoading()}))},loadingButtonText:"Saving..."}),p=new s({popupSelector:"#addModal",handleFormSubmit:e=>{p.showLoading(),a.addCard(e).then((e=>{!function(e){const t=d(e);l.addItem(t)}(e),p.close()})).catch((e=>console.log(e))).finally((()=>{p.hideLoading()}))},loadingButtonText:"Saving..."}),v=new s({popupSelector:"#change-image-modal",handleFormSubmit:e=>{v.showLoading(),a.updateImage(e).then((()=>{h.setImage(e.avatar),v.close()})).catch((e=>console.log(e))).finally((()=>{v.hideLoading()}))},loadingButtonText:"Saving..."}),b=new n(r,"#edit-profile-form"),g=new n(r,"#add-card-form"),f=new n(r,"#change-image-form");b.enableValidation(),g.enableValidation(),f.enableValidation();const E=document.querySelector(".profile__info-button"),S=document.querySelector(".profile__button"),L=document.querySelector("#name"),y=document.querySelector("#description"),k=document.querySelector("#avatar"),C=document.querySelector(".profile__overlay-button");E.addEventListener("click",(()=>{!function(){const e=h.getUserInfo();L.value=e.name,y.value=e.about}(),b.toggleButtonState(),_.open()})),S.addEventListener("click",(()=>{g.toggleButtonState(),p.open()})),C.addEventListener("click",(()=>{!function(){const e=h.getAvatar();k.value=e.image}(),f.toggleButtonState(),v.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,